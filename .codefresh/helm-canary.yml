version: '1.0'
steps:

  SetVars:
    description: Freestyle step..
    title: Free styling
    environment:
      - GOOGLE_PROJECT=otters-cc
      - TLD=otterly.cc
    image: alpine:latest
    commands:
      - env
      - cf_export GOOGLE_PROJECT
      - cf_export TLD
      - cf_export BUILD_IMAGE="gcr.io/$GOOGLE_PROJECT/${{CF_REPO_NAME}}:${{CF_SHORT_REVISION}}"
      - cf_export HOST="${{CF_BRANCH_TAG_NORMALIZED}}.${{CF_REPO_NAME}}.$TLD"
      - cf_export NAMESPACE="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_REPO_NAME}}"
      - cf_export KUBE_CONTEXT="istio-test@otters-cc"
      - cf_export NAMESPACE="foobar"
      - cf_export RELEASE="colors"
  SeeThemVars:
    description: Freestyle step..
    title: Free stylin them var
    image: alpine:latest
    commands:
      - env

  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: todaywasawesome/colorcoded
    working_directory: ./
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    dockerfile: Dockerfile

#  BuildingDockerImage:
#    title: Building Docker Image
#    type: build
#    image_name: '${{CF_REPO_NAME}}'
#    working_directory: ./
#    tag: '${{CF_SHORT_REVISION}}'
#    dockerfile: Dockerfile
    
  PushToGCR:
    type: push
    title: Pushing Docker image to GCR
    candidate: '${{BuildingDockerImage}}'
    tag: '${{CF_SHORT_REVISION}}'
    image_name: '${{CF_REPO_NAME}}'
    registry: gcr-io
    fail_fast: false


  IstioInfo:
    title: Gather istio information
    image: containers101/k8sclitoolset
    commands:
    - kubectl config use-context istio-test@otters-cc
    - istioctl get virtualservices
    - cf_export prodVersion=$(kubectl get service -l status=prod -n ${{NAMESPACE}} -o=jsonpath='{$.items[0].metadata.name}')
    - cf_export prodImage=$(kubectl get service -l status=prod -n ${{NAMESPACE}} -o=jsonpath='{$.items[0].metadata.labels.version}')
    - cf_export canaryVersion=${{RELEASE}}-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    - cf_export canaryImage=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}


  DeployHelm:
    title: Prod with Canary Helm Release
    image: containers101/k8sclitoolset
    commands:
    - echo "Prod is ${{prodVersion}} and Canary is ${{canaryVersion}}"
#    - if [ "${{prodVersion}}" = "${{canaryVersion}}" ]; then echo "Prod version is the same as canary, nothing to do. Exiting"; exit 1; fi
#    - helm upgrade --install ${{RELEASE}} deploy/helm/colors --namespace=${{NAMESPACE}} --debug --set deployment[0].track=release --set deployment[0].image.repository=${{BUILD_IMAGE}} --set deployment[0].image.tag="${{prodImage}}" --set deployment[0].image.version="${{prodImage}}" --set deployment[0].image.pullSecret=codefresh-generated-r.cfcr.io-cfcr-canary --set deployment[1].track=canary --set deployment[1].image.repository=${{BUILD_IMAGE}} --set deployment[1].image.tag='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}' --set deployment[1].image.version="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}" --set deployment[1].image.pullSecret=codefresh-generated-r.cfcr.io-cfcr-canary

    - |
      helm upgrade \
      --install ${{RELEASE}} deploy/helm/colors \
      --namespace=${{NAMESPACE}} \
      --debug \
      --set deployment[0].track=release \
      --set deployment[0].image.repository=${{BUILD_IMAGE}} \
      --set deployment[0].image.tag="${{prodImage}}" \
      --set deployment[0].image.version="${{prodImage}}" \
      --set deployment[1].track=canary \
      --set deployment[1].image.repository=${{BUILD_IMAGE}} \
      --set deployment[1].image.version="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"

  StartCanary:
    title: Canary Rollout
    image: containers101/k8sclitoolset
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - bash -e istio/rollout.sh ${{CF_VOLUME_PATH}}/ ${{prodVersion}} ${{canaryVersion}} 35 ${{CF_KUBECONFIG_PATH}} ${{NAMESPACE}}

  ReleaseProd:
    title: Do Final Helm Release
    image: containers101/k8sclitoolset
    commands:
    - kubectl config use-context ${{KUBE_CONTEXT}}
    - echo "New Prod is ${{canaryVersion}}, doing final Helm release"
    - |
      helm upgrade \
      --install ${{RELEASE}} deploy/helm/colors \
      --namespace=${{NAMESPACE}} \
      --debug \
      --set deployment[0].track=canary \
      --set deployment[0].image.repository=${{BUILD_IMAGE}} \
      --set deployment[0].image.version="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}" \
    - echo "Marking new release as prod"
    - kubectl label svc ${{canaryVersion}} status=prod -n ${{NAMESPACE}}
